# Configuración genérica para una sola base de datos.

[alembic]
# Ruta a los scripts de migración
# Usa barras normales (/) también en Windows para una ruta agnóstica al sistema operativo
script_location = alembic

# Plantilla usada para generar los nombres de los archivos de migración; El valor por defecto es %%(rev)s_%%(slug)s
# Descomenta la línea de abajo si quieres que los archivos tengan fecha y hora al inicio
# ver https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# para todos los tokens disponibles
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Ruta para sys.path, se añadirá al inicio de sys.path si está presente.
# Por defecto es el directorio de trabajo actual.
prepend_sys_path = .

# Zona horaria a usar al renderizar la fecha dentro del archivo de migración
# así como en el nombre del archivo.
# Si se especifica, requiere python>=3.9 o la librería backports.zoneinfo y tzdata.
# Cualquier dependencia necesaria se puede instalar agregando `alembic[tz]` a los requisitos de pip
# El valor de cadena se pasa a ZoneInfo()
# Dejar en blanco para usar la hora local
# timezone =

# Longitud máxima de caracteres para el campo "slug"
# truncate_slug_length = 40

# Establecer en 'true' para ejecutar el entorno durante
# el comando 'revision', independientemente de autogenerate
# revision_environment = false

# Establecer en 'true' para permitir archivos .pyc y .pyo sin
# un archivo fuente .py como revisiones en el
# directorio versions/
# sourceless = false

# Especificación de la ubicación de versiones; Por defecto es
# alembic/versions. Al usar múltiples directorios de versiones,
# las revisiones iniciales deben especificarse con --version-path.
# El separador de ruta usado aquí debe ser el especificado por "version_path_separator" abajo.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# Separador de ruta de versiones; Como se mencionó arriba, este es el carácter usado para dividir
# version_locations. El valor por defecto en nuevos archivos alembic.ini es "os", que usa os.pathsep.
# Si esta clave se omite, se usa el comportamiento antiguo de dividir por espacios y/o comas.
# Valores válidos para version_path_separator son:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
# version_path_separator = newline
#
# Usa os.pathsep. Configuración por defecto para nuevos proyectos.
version_path_separator = os

# Establecer en 'true' para buscar archivos fuente recursivamente
# en cada directorio de "version_locations"
# Nuevo en Alembic versión 1.10
recursive_version_locations = true

# Codificación de salida usada cuando se escriben archivos de revisión
# desde script.py.mako
output_encoding = utf-8

# URL de conexión a la base de datos.
sqlalchemy.url = postgresql+psycopg2://tesis_api_user:Contraseña.1234@localhost:5432/tesis_kpi_db


[post_write_hooks]
# post_write_hooks define scripts o funciones de Python que se ejecutan
# en los scripts de revisión recién generados. Ver la documentación para más
# detalles y ejemplos

# Formatear usando "black" - usa el runner console_scripts, contra el entrypoint "black"
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Lint con intentos de corregir usando "ruff" - usa el runner exec, ejecuta un binario
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Configuración de logging
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S